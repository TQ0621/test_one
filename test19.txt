#include<stdio.h>
#include<assert.h>
#include<string.h>
#include<stdlib.h>
#include<errno.h>
#pragma warning(disable:4996)
#define MAX 100
#define NAME 20
#define INC_SZ 2

typedef struct peoinfo
{
	char name[NAME];
	int age;
	char sex[10];
	char tele[12];
	char addr[30];
}peoinfo;

typedef struct Contact
{
	peoinfo* data;
	int count;
	int capacity;
}Contact;
//初始化Contact(3个)
int InitContact(Contact* pc);
//释放
void DestroyContact(Contact* pc);
//主页
void menu();

enum option
{
	EXIT,
	ADD,
	DEL,
	SEARCH,
	MODIFY,
	SHOW,
	SORT,
};
//增容
void CkeckCapacity(Contact* pc);
//添加
void AddContact(Contact* pc);
//查找peoinfo
int Findbyname(Contact* pc, char name[]);
//删除
void DelContact(Contact* pc);
//查找
void SearchContact(Contact* pc);
//修改
void ModifyContact(Contact* pc);
//显示
void ShowContact(const Contact* pc);
//name比较
int cmp_peo_by_name(const void* e1, const void* e2);
//排序
void SortContact(Contact* pc);

int main()
{
	int input = 0;
	Contact con;
	InitContact(&con);//初始化
	do
	{
		menu();
		printf("请选择:>");
		scanf("%d", &input);
		switch (input)
		{
		case ADD:
			AddContact(&con);
			break;
		case DEL:
			DelContact(&con);
			break;
		case SEARCH:
			SearchContact(&con);
			break;
		case MODIFY:
			ModifyContact(&con);
			break;
		case SHOW:
			ShowContact(&con);
			break;
		case SORT:
			SortContact(&con);
			break;
		case EXIT:
			DestroyContact(&con);
			printf("退出通讯录\n");
			break;
		default:
			printf("选择错误\n");
			break;
		}
	}while (input);
	return 0;
}

int InitContact(Contact* pc)
{
	assert(pc);
	pc->count = 0;
	pc->data = (peoinfo*)calloc(3, sizeof(peoinfo));
	if (pc->data == NULL)
	{
		printf("InitContact:%s\n", strerror(errno));
		return 1;
	}
	pc->capacity = 3;
	return 0;
}
void DestroyContact(Contact* pc)
{
	assert(pc);
	free(pc->data);
	pc->data = NULL;
	printf("成功释放堆空间\n");
}
void menu()
{
	printf("************************************\n");
	printf("****************通讯录**************\n");
	printf("******  1. add     2. del     ******\n");
	printf("******  3. search  4. modify  ******\n");
	printf("******  5. show    6. sort    ******\n");
	printf("******  0. exit               ******\n");
	printf("************************************\n");
}
void CkeckCapacity(Contact* pc)
{
	if (pc->count == pc->capacity)
	{
		peoinfo* ptr = (peoinfo*)realloc(pc->data, (pc->capacity + INC_SZ) * sizeof(peoinfo));
		if (ptr == NULL)
		{
			printf("CkeckCapacity:%s\n", strerror(errno));
			return;
		}
		else
		{
			pc->data = ptr;
			pc->capacity += INC_SZ;
			printf("增容成功\n");
		}
	}
}
void AddContact(Contact* pc)
{
	assert(pc);
	//增容
	CkeckCapacity(pc);

	printf("请输入名字:>");
	scanf("%s", pc->data[pc->count].name);
	printf("请输入年龄:>");
	scanf("%d", &(pc->data[pc->count].age));
	printf("请输入性别:>");
	scanf("%s", pc->data[pc->count].sex);
	printf("请输入电话:>");
	scanf("%s", pc->data[pc->count].tele);
	printf("请输入地址:>");
	scanf("%s", pc->data[pc->count].addr);
	pc->count++;
	printf("增加成功\n");
}

int Findbyname(Contact* pc, char name[])
{
	assert(pc);
	int i = 0;
	for (i = 0; i < pc->count; i++)
	{
		if (0 == strcmp(pc->data[i].name, name))
		{
			return i;
		}
	}
	return -1;
}

void DelContact(Contact* pc)
{
	char name[NAME] = { 0 };
	assert(pc);
	int i;
	if (pc->count == 0)
	{
		printf("通讯录为空，无信息删除\n");
		return;
	}
	printf("请输入要删除的人的名字\n");
	scanf("%s", name);
	int pos = Findbyname(pc, name);
	if (pos == -1)
	{
		printf("要删除的人不存在\n");
		return;
	}
	for (i = pos; i < pc->count - 1; i++)
	{
		pc->data[i] = pc->data[i + 1];
	}
	pc->count--;
	printf("删除成功\n");
}

void SearchContact(Contact* pc)
{
	char name[NAME] = { 0 };
	assert(pc);
	if (pc->count == 0)
	{
		printf("通讯录为空，无信息查询\n");
		return;
	}
	printf("请输入要查询的人的名字\n");
	scanf("%s", name);
	int pos = Findbyname(pc, name);
	if (pos == -1)
	{
		printf("要查询的人不存在\n");
		return;
	}
	printf("%-20s\t%-5s\t%-5s\t%-12s\t%-30s\n", "名字", "年龄", "性别", "电话", "地址");
	printf("%-20s\t%-5d\t%-5s\t%-12s\t%-30s\n", pc->data[pos].name,
		pc->data[pos].age,
		pc->data[pos].sex,
		pc->data[pos].tele,
		pc->data[pos].addr);
}

void ModifyContact(Contact* pc)
{
	assert(pc);
	char name[NAME] = { 0 };
	if (pc->count == 0)
	{
		printf("通讯录为空，无信息修改\n");
		return;
	}
	printf("请输入要修改的人的名字\n");
	scanf("%s", name);
	int pos = Findbyname(pc, name);
	if (pos == -1)
	{
		printf("要修改的人不存在\n");
		return;
	}
	printf("请输入要修改的人信息\n");
	printf("请输入名字:>");
	scanf("%s", pc->data[pc->count].name);
	printf("请输入年龄:>");
	scanf("%d", &(pc->data[pc->count].age));
	printf("请输入性别:>");
	scanf("%s", pc->data[pc->count].sex);
	printf("请输入电话:>");
	scanf("%s", pc->data[pc->count].tele);
	printf("请输入地址:>");
	scanf("%s", pc->data[pc->count].addr);
	printf("修改成功\n");
}

void ShowContact(const Contact* pc)
{
	assert(pc);
	if (pc->count == 0)
	{
		printf("通讯录为空，无法显示\n");
		return;
	}
	int i = 0;
	printf("%-20s\t%-5s\t%-5s\t%-12s\t%-30s\n", "名字", "年龄", "性别", "电话", "地址");
	for (i = 0; i < pc->count; i++)
	{
		printf("%-20s\t%-5d\t%-5s\t%-12s\t%-30s\n", pc->data[i].name,
			pc->data[i].age,
			pc->data[i].sex,
			pc->data[i].tele,
			pc->data[i].addr);
	}
}

int cmp_peo_by_name(const void* e1, const void* e2)
{
	return strcmp(((peoinfo*)e1)->name, ((peoinfo*)e2)->name);
}

void SortContact(Contact* pc)
{
	assert(pc);
	if (pc->count == 0)
	{
		printf("通讯录为空，无法排序\n");
		return;
	}
	qsort(pc->data, pc->count, sizeof(peoinfo), cmp_peo_by_name);
	printf("排序成功\n");
}
