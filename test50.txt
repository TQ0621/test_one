//加入
BinTree Insert(ElementType x, BinTree BST)
{
	if (!BST)
	{
		BST = malloc(sizeof(struct TreeNode));
		BST->Data = x;
		BST->Left = BST->Right = NULL;
	}
	else
	{
		if (x < BST->Data)
		{
			BST->Left = Insert(x, BST->Left);
		}
		else if(x>BST->Data)
		{
			BST->Right = Insert(x, BST->Right);
		}
		//x已经存在什么都不做
	}
	return BST;
}

//删除
BinTree Delete(ElementType x, BinTree BST)
{
	Position tmp;//树的结点类型
	if (!BST)
		printf("未找到元素\n");
	else if (x < BST->Data)
	{
		BST->Left = Delete(x, BST->Left);
	}
	else if (x > BST->Data)
	{
		BST->Right = Delete(x, BST->Right);
	}
	else if (BST->Left && BST->Right)
	{
		tmp = findMin(BST->Ringt);//查找右子树的最大值
		BST->Data = tmp->Data;
		BST->Right = Delete(BST->Data, BST->Right);
	}
	else
	{
		tmp = BST;
		if (!BST->Left)
			BST = BST->Right;
		else if (!BST->Right)
			BST = BST->Left;
		free(tmp);
	}
	return BST;
}